<snippet>
	<content><![CDATA[
struct seg_tree_assign {
    vector<int> t, lazy;
    vector<bool> dont;
    int n;
    void init(int m) {
        n = m;
        t.assign(4 * n, 0);
        lazy.assign(4 * n, 0);
        dont.assign(4 * n, true);
    }
    void push(int v, int k, bool leaf) {
        if (!dont[v]) {
            t[v] = lazy[v] * k;
            if (!leaf) {
                lazy[v * 2] = lazy[v * 2 + 1] = lazy[v];
                dont[v * 2] = dont[v * 2 + 1] = false;
            }
            lazy[v] = 0, dont[v] = true;
        }
    }
    void assign_aux(int v, int tl, int tr, int l, int r, int new_val) {
        if (l > r) return push(v, tr - tl + 1, tl == tr);
        if (l == tl && tr == r) {
            lazy[v] = new_val, dont[v] = false;
            push(v, tr - tl + 1, tl == tr);
        } else {
            push(v, tr - tl + 1, tl == tr);
            int tm = (tl + tr) / 2;
            assign_aux(v * 2, tl, tm, l, min(r, tm), new_val);
            assign_aux(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, new_val);
            t[v] = t[v * 2] + t[v * 2 + 1];
        }
    }
    int query_aux(int v, int tl, int tr, int l, int r) {
        push(v, tr - tl + 1, tl == tr);
        if (l > r) return 0;
        if (l == tl && tr == r) return t[v];
        int tm = (tl + tr) / 2;
        int ret = query_aux(v * 2, tl, tm, l, min(r, tm)) +
                  query_aux(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
        t[v] = t[v * 2] + t[v * 2 + 1];
        return ret;
    }
    void assign(int l, int r, int x) {
        return assign_aux(1, 0, n - 1, l, r, x);
    }
    int query(int l, int r) {
        return query_aux(1, 0, n - 1, l, r);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg_tree_assignment_slow</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
