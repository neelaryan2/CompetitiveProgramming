<snippet>
	<content><![CDATA[
struct seg_tree_assign {
    vector<int> t, d;
    vector<bool> dont;
    int n, h;
    seg_tree_assign() {}
    void init(int m = 0) {
        n = m;
        h = 32 - __builtin_clz(n);
        d.assign(n, 0);
        dont.assign(n, true);
        t.assign(2 * n, 0);
    }
    void build(vector<int>& a) {
        init(a.size());
        for (int i = 0; i < n; i++)
            t[i + n] = a[i];
        push_up(0, n - 1);
    }
    void calc(int p, int k) {
        if (dont[p])
            t[p] = t[p << 1] + t[p << 1 | 1];
        else
            t[p] = d[p] * k;
    }
    void apply(int p, int value, int k) {
        t[p] = value * k;
        if (p < n) d[p] = value, dont[p] = false;
    }
    void push_up(int l, int r = -1) {
        if (r == -1) r = l;
        l += n, r += n;
        for (int k = 2; l > 1; k <<= 1) {
            l >>= 1, r >>= 1;
            for (int i = r; i >= l; --i) calc(i, k);
        }
    }
    void push_down(int l, int r = -1) {
        if (r == -1) r = l;
        int s = h, k = 1 << (h - 1);
        for (l += n, r += n; s > 0; --s, k >>= 1) {
            for (int i = l >> s; i <= r >> s; ++i) {
                if (dont[i]) continue;
                apply(i << 1, d[i], k);
                apply(i << 1 | 1, d[i], k);
                d[i] = 0, dont[i] = true;
            }
        }
    }
    void assign(int l, int r, int value) {
        if (r < l || r >= n || l < 0) return;
        push_down(l), push_down(r);
        bool cl = false, cr = false;
        int k = 1;
        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1, k <<= 1) {
            if (cl) calc(l - 1, k);
            if (cr) calc(r, k);
            if (l & 1) apply(l++, value, k), cl = true;
            if (r & 1) apply(--r, value, k), cr = true;
        }
        for (--l; r > 0; l >>= 1, r >>= 1, k <<= 1) {
            if (cl) calc(l, k);
            if (cr && (!cl || l != r)) calc(r, k);
        }
    }
    int query(int l, int r) {
        int res = 0;
        if (r < l || r >= n || l < 0) return res;
        push_down(l), push_down(r);
        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l & 1) res += t[l++];
            if (r & 1) res += t[--r];
        }
        return res;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg_tree_assignment_fast</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
