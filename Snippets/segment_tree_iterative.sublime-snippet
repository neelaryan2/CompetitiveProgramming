<snippet>
	<content><![CDATA[
// point updates and range sum queries
template <class node>
struct seg_tree {
    const static int NEUTRAL = 0;
    vector<node> t;
    int n;
    seg_tree() {}
    void init(int m) {
        n = m;
        t.assign(2 * n, node(NEUTRAL));
    }
    void build(vector<node> a) {
        init(a.size());
        for (int i = 0; i < n; i++)
            t[i + n] = a[i];
        for (int i = n - 1; i > 0; i--)
            calc(i);
    }
    void calc(int i) {
        // pull from children
        t[i] = t[i << 1] + t[i << 1 | 1];
    }
    void modify(int p, node x) {  // on 0-indexed p
        for (t[p += n] = x; p >>= 1;)
            calc(p);
    }
    node query(int l, int r) {  // interval [l,r]
        node resl(NEUTRAL), resr(NEUTRAL);
        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
            if (l & 1) resl = resl + t[l++];
            if (r & 1) resr = t[--r] + resr;
        }
        return resl + resr;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg_tree_iterative</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
