<snippet>
	<content><![CDATA[
struct LCA {
    int n;
    vector<vector<int>> adj;
    vector<int> depth, euler, first_occurrence;
    RMQ<int> rmq;
    LCA() {}
    void init(const vector<vector<int>> &_adj = {}) {
        n = (int)_adj.size();
        adj = _adj;
        depth.resize(n);
        first_occurrence.resize(n);
    }
    void dfs(int node, int parent) {
        depth[node] = (parent == -1) ? 0 : depth[parent] + 1;
        first_occurrence[node] = euler.size();
        euler.push_back(node);
        for (int neighbor : adj[node])
            if (neighbor != parent) {
                dfs(neighbor, node);
                euler.push_back(node);
            }
    }
    void build(int root = 0) {
        dfs(root, -1);
        assert((int)euler.size() == 2 * n - 1);
        vector<int> euler_depths;
        for (int node : euler)
            euler_depths.push_back(depth[node]);
        rmq.build(euler_depths);
    }
    int lca(int a, int b) const {
        a = first_occurrence[a];
        b = first_occurrence[b];
        if (a > b) swap(a, b);
        return euler[rmq.query_index(a, b + 1)];
    }
    int dist(int a, int b) const {
        return depth[a] + depth[b] - 2 * depth[lca(a, b)];
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca_simple</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
