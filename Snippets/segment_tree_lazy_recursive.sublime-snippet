<snippet>
	<content><![CDATA[
template <class node>
struct seg_tree_lazy {
    vector<node> t, lazy;
    int n;
    void init(int m) {
        n = m;
        t.resize(4 * n);
        lazy.resize(4 * n);
    }
    void push(int v, int l, int r) {
        lazy[v * 2] = lazy[v * 2] + lazy[v];
        lazy[v * 2 + 1] = lazy[v * 2 + 1] + lazy[v];
        t[v * 2] = t[v * 2] + lazy[v] * l;
        t[v * 2 + 1] = t[v * 2 + 1] + lazy[v] * r;
        lazy[v] = node();
    }
    void add_aux(int v, int tl, int tr, int l, int r, int addend) {
        if (l > r) return;
        if (l == tl && tr == r) {
            t[v] = t[v] + node(addend) * (tr - tl + 1);
            lazy[v] = lazy[v] + addend;
        } else {
            int tm = (tl + tr) / 2;
            push(v, tm - tl + 1, tr - tm);
            add_aux(v * 2, tl, tm, l, min(r, tm), addend);
            add_aux(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, addend);
            t[v] = t[v * 2] + t[v * 2 + 1];
        }
    }
    node query_aux(int v, int tl, int tr, int l, int r) {
        if (l > r) return node();
        if (l == tl && tr == r) return t[v];
        int tm = (tl + tr) / 2;
        push(v, tm - tl + 1, tr - tm);
        return query_aux(v * 2, tl, tm, l, min(r, tm)) +
               query_aux(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
    }
    void add(int l, int r, int x) {
        return add_aux(1, 0, n - 1, l, r, x);
    }
    node query(int l, int r) {
        return query_aux(1, 0, n - 1, l, r);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg_tree_lazy_slow</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
