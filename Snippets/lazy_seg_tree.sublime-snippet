<snippet>
	<content><![CDATA[
struct segtree {
    vector<ll> t, d;
    int n, h;
    segtree(int m) {
        n = m;
        h = 32 - __builtin_clz(n);
        d.assign(n, 0);
        t.assign(2 * n, 0);
    }
    void apply(int p, ll value) {
        t[p] += value;
        if (p < n) d[p] += value;
    }
    void build(int p) {
        while (p >>= 1)
            t[p] = t[p << 1] + t[p << 1 | 1] + d[p];
    }
    void push(int p) {
        for (int s = h; s > 0; --s) {
            int i = p >> s;
            if (d[i] != 0) {
                apply(i << 1, d[i]);
                apply(i << 1 | 1, d[i]);
                d[i] = 0;
            }
        }
    }
    void add(int l, int r, ll value) {
        l += n, r += n + 1;
        int _l = l, _r = r;
        for (; l < r; l >>= 1, r >>= 1) {
            if (l & 1) apply(l++, value);
            if (r & 1) apply(--r, value);
        }
        build(_l), build(_r - 1);
    }
    ll query(int l, int r) {
        l += n, r += n + 1;
        push(l), push(r - 1);
        ll res = 0;
        for (; l < r; l >>= 1, r >>= 1) {
            if (l & 1) res += t[l++];
            if (r & 1) res += t[--r];
        }
        return res;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seg_fast_lazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
